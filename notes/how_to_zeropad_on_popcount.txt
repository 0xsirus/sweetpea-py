-- On how to pad out odd length lists:
-- [1, 2, 3]
-- generate a fresh variable: 4
-- [1, 2, 3, 4]
-- AND concat a condition that is -4 (that is, the fresh var is 0)

-- find the length of the list, get it up to an even number

-- [[1], [2], [3], [4], [5], [6], [7], [8], [9]]

-- 1) make it even: get it up to 10
-- [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]] && -10
-- 1b) pair up & count with 1 bit adders

-- 2) make it even: get it up to 6
-- [[1+2 1+2], [3+4 3+4], [5+6 5+6], [7+8 7+8], [9+10 9+10]]
-- [[A, B], [C, D], [E, F], [G, H], [I, J]] -- these are 2 bit values!!
-- [[A, B], [C, D], [E, F], [G, H], [I, J], [K, L]]  && -K && -L
-- 2b) pair up & count with 2 bit adders

-- these are fresh var names because naming is hard
-- 3) make it even: up to 4
-- [[A, B, C], [D, E, F], [G, H, I]]  -- 3 bit values!!
-- [[A, B, C], [D, E, F], [G, H, I], [J, K, L]] && -J && -K && -L
-- 3b) pair up & count with 4 bit adders

-- these are fresh var names because naming is hard
-- [[A, B, C, D], [E, F, G, H]]  -- 4 bit values!!
-- 4) final add! 5 bit value: [A B C D E] is the result!
-- Note! B C D E are SUM bits while A is the FINAL C bit!!



-- more efficent THIS IS HARDER TO IMPLEMENT
-- OR make a new var K, and just append it like [K, I, J] && -K
-- this is bad because then you have to deal with the highest carryout too
